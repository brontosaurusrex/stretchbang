#!/bin/bash

array=(
http://wfmu.org/wfmu.pls            # a comment
http://wruv.org/wruv256.m3u         # here?
http://listen.xray.fm:8000/stream
http://relay.181.fm:8094
http://relay.181.fm:8008
http://relay.181.fm:8064
http://pub1.diforfree.org:8000/di_dubstep_hi
http://pub1.diforfree.org:8000/di_mainstage_hi
http://pub1.diforfree.org:8000/di_drumandbass_hi
http://pub2.diforfree.org:8000/di_hardcore_hi
http://pub2.diforfree.org:8000/di_bassline_hi
http://pub2.diforfree.org:8000/di_classicvocaltrance_hi
http://pub2.diforfree.org:8000/di_downtempolounge_hi
)

on="  / "
off="  \\ "

store="$HOME/tmp"
pidPath="$store/radiopid"
mpvtxt="$store/mpv.txt"
#mpverr="$store/mpv.err"
idPath="$store/id"

mkdir -p "$store"

# store station id to file
storeid () {
    echo "$id" > "$idPath"
}

# should read id number from store
if [ -f "$idPath" ]; then
    id=$(cat "$idPath")
else
    id="0"
    storeid
fi

radio=${array[$id]}

echoid () {
    >&2 echo "id $id / radio $radio"
}

croplog () {
    #>&2 echo "croplog"
    # crop and clean log, this shall only happen when mpv is not writing to file
    file="$mpvtxt"
    if [ -f "$file" ]; then
        # let's just keep 'icy-title' and 'Playing' lines and crop to last 100 lines
        grep -E "icy-title:|Playing:" "$mpvtxt" | uniq | tail -n 100 > "$file.tmp" && cp "$file.tmp" "$file" && rm "$file.tmp"
        touch "$file"
    fi
}

off () {
    # if file
    [ -f "$pidPath" ] && Rpid=$(cat "$pidPath")
    # if var
    [[ ! -z "$Rpid" ]] && kill "$Rpid"; rm "$pidPath"
    echo "$off" # off
    croplog
}

on () {
    mpv --no-config --no-video --no-resume-playback --no-ytdl --cache-secs 7 --af=lavfi=[loudnorm=LRA=10:I=-17] "$radio" >> "$mpvtxt" 2> /dev/null &
    #mpv --no-config --no-video --no-resume-playback --no-ytdl  "$radio" >> "$mpvtxt" 2> /dev/null &
    
    Rpid="$!"
    echo "$Rpid" > "$pidPath"
    echo "$on" # on
}

switch () {

    # next station
    if [ "$1" == "+" ]; then
        ((id+=1))
    # previous station
    elif [ "$1" == "-" ]; then
        ((id-=1))
    else # next station, assume + if nothing is send
        ((id+=1))
    fi
    
    max=$(( ${#array[@]} - 1 ))
    
    if (( id > max )); then
       id=0
    elif (( id < 0 )); then
       id="$max"
    fi
    
    radio=${array[$id]}

    echoid
    storeid
    off
    on
    
    notify-send -u normal "id $id / radio $radio" 2>/dev/null
}
        
# main
if [ "$1" == "toggle" ]; then

    if [ -f "$pidPath" ]; then
        off
    else
        on
    fi
    
elif [ "$1" == "notify" ]; then

    icytitle="$(sed -n 's/^ icy-title: //p' "$mpvtxt" | tail -1)" 
    playing="$(sed -n 's/^Playing: //p' "$mpvtxt" | tail -1)"

    >&2 echo "$icytitle"; >&2 echo "$playing"
    
    notify-send -u normal "$icytitle" 2>/dev/null || notify-send -u normal "$playing" 2>/dev/null
    
elif [ "$1" == "switch" ]; then
    
    # "$2" must be + or -
    switch "$2"
    
elif [ "$1" == "last" ]; then
    
    if [ -f "$mpvtxt" ]; then
        sed -n 's/^ icy-title: //p' "$mpvtxt" | grep -v '^$' | uniq | tail -n 12
    fi

else # status

    if [ -f "$pidPath" ]; then
        echo "$on" # on
    else
        echo "$off" # off
    fi

fi


## tint2rc executor

#execp = new
#execp_centered = 1
#execp_has_icon = 0
#execp_command = radioClicky
#execp_continuous = 0
#execp_font = cuprum 12
#execp_font_color = #111111 70
#execp_padding = 0 0 0
#execp_tooltip = radio
#execp_lclick_command = radioClicky toggle
#execp_rclick_command = radioClicky notify
#execp_mclick_command = radioClicky switch
#execp_interval = 12

## If using alsa, you may also add master volume to mice scroller

#execp_uwheel_command = amixer set Master 1%-
#execp_dwheel_command = amixer set Master 1%+
