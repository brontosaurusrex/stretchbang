#!/bin/bash

array=(
http://wfmu.org/wfmu.pls
http://wruv.org/wruv256.m3u
http://listen.xray.fm:8000/stream
https://kexp-mp3-128.streamguys1.com/kexp128.mp3
http://relay.181.fm:8064
http://relay.181.fm:8000
http://relay.181.fm:8002
http://streaming.radionomy.com:80/12Bar
http://stream-uk1.radioparadise.com/mp3-192
http://19353.live.streamtheworld.com/977_HITS_SC
http://icyrelay.181.fm/181-vibe_128k.mp3
http://stream.radiorox.no/rox128.mp3
http://streaming.radionomy.com/1291AlternativeRock
http://streams.ffh.de/ffhchannels/aac/hqrock.m3u
http://www.listenlive.eu/bandit_aac_hq.m3u
http://broadcast.infomaniak.ch/energyrock-high.mp3.m3u
http://us2.internet-radio.com:8046/listen.pls
http://184.75.223.178:8067/listen.pls
http://listen.181fm.com/181-beatles_128k.mp3
http://listen.181fm.com/181-buzz_128k.mp3
http://listen.181fm.com/181-hardrock_128k.mp3
http://104.236.145.45:8000/stream
http://ice1.somafm.com/dubstep-256-mp3
)

# store paths
store="$HOME/.config/radioClicky"
mpvtxt="$store/mpv.txt"
#mpverr="$store/mpv.err"
idPath="$store/id"
recPath="$store/rec"
pipe="$store/pipe"
metacache="$store/meta"
sound="$store/sounds"

mkdir -p "$store/meta" || exit

extfile="$store/radiolist"
# add external file to array if there is one
if [ -f "$extfile" ]; then
    while read -r line ; do
        array+=($line)
    done < "$extfile"
fi

# store station id to file
storeid () {
    echo "$id" > "$idPath"
}

# should read id number from store
readid () {
    if [ -f "$idPath" ]; then
    id=$(cat "$idPath")
else
    id="0"
    storeid
fi
}

readid

# variables
on=" / "
off=" \\ "
radio () {
    radio=${array[$id]}
}
radio
touch "$pipe"

# functions
echoid () {
    >&2 echo "$id $radio"
}

notifyid () {
    notify-send -u normal "$id $radio" 2>/dev/null
}

croplog () {
    #>&2 echo "croplog"
    # crop and clean log, this shall only happen when mpv is not writing to file
    file="$mpvtxt"
    if [ -f "$file" ]; then
        # let's just keep 'icy-title' and 'Playing' lines and crop to last 100 lines
        grep -E "icy-title:|Playing:" "$mpvtxt" | grep -wv "^ icy-title: $" | uniq | tail -n 100 > "$file.tmp" && cp "$file.tmp" "$file" && rm "$file.tmp"
        touch "$file"
    fi
}

isRunning () {

    # lets query whatever to see if the thing is already running
    if [ ! -f "$pipe" ] && (echo '{ "command": ["get_property", "mpv-version"] }' | socat - "$pipe") &> /dev/null ; then 
        #echo "is running"
        true
    else
        false
    fi
}

klik () { 
    if [ -d "$sound" ]; then # play klik sound
        klik=$(find "$sound" -type f | shuf -n 1)
        mpv "$klik" --no-config --no-video --no-resume-playback --no-ytdl &> /dev/null &
    fi
}


start () {
    
    if ! isRunning; then 
        # this only runs if not started before
        #rm -f "$pipe"
        #mkfifo "$pipe" #2> /dev/null
        mpv --idle --no-config --no-video --no-resume-playback --no-ytdl --cache-secs 7 --af=lavfi=[loudnorm=LRA=10:I=-17] --input-ipc-server="$pipe" >> "$mpvtxt" 2> /dev/null &
        klik # sound
    fi
}

off () {

    klik # sound
    if isRunning; then # quit it and delete pipe
        metacache # cache icy metadata
        echo '{ "command": ["quit"] }' | socat - "$pipe" &> /dev/null 
        #rm "$pipe"
    fi
    
    sleep 0.1 # not sure
    echo "$off" # off
    croplog
}


on () {

    start # if not running

    sleep 0.3
    # check if mpv is ready and connected to pipe
    if isRunning; then
        echo "loadfile $radio" | socat - "$pipe"
    else
        sleep 3
        echo "loadfile $radio" | socat - "$pipe"
    fi
    
    # what if is still not running here?
    if isRunning; then
        echo "$on" # on
    fi

}

switch () {
    
    metacache # cache icy metadata as seen by mpv

    # next station
    if [ "$1" == "+" ]; then
        ((id+=1))
    # previous station
    elif [ "$1" == "-" ]; then
        ((id-=1))
    # exact id (check if integer)
    elif [[ $1 =~ ^-?[0-9]+$ ]]; then
        id="$1"
    else # next station, assume + if nothing is send
        ((id+=1))
    fi
    
    max=$(( ${#array[@]} - 1 ))
    
    if (( id > max )); then
       id=0
    elif (( id < 0 )); then
       id="$max"
    fi
    
    radio=${array[$id]}

    echoid
    storeid

    if isRunning; then
        # echo new radio url to pipe
        echo "loadfile $radio" | socat - "$pipe"
    else
        on
    fi
    klik # sound
}

list () {
 
    for i in "${!array[@]}"; 
        do
            if (( id == i )); then
                echo "$(statussimple) ${array[i]}"
            else
                echo "$i ${array[i]}"
            fi
        done
    
}

beforeafter () {
 
    max=$(( ${#array[@]} - 1 ))
    
    if (( 2 * half > max )); then
        half=$(( max / 2 ))
    fi        

    if (( half > id )); then
        before=$(( id )) 
         after=$(( 2 * half - before ))
    
    elif (( id + half > max )); then
         after=$(( max - id ))
        before=$(( 2 * half - after ))
    else 
        before="$half"
        after="$half"
    fi   
    
}

listrange () {

    half="$1" && beforeafter # populates before and after
            
    for (( i = id - before; i <= id + after; ++i )); do

            # action
            if (( id != i )); then
                echo "$i" "${array[i]}"; 
            else
                echo "$(statussimple)" "${array[i]}";
            fi
    done
    
}

status () {
        
        echoid # for tooltip

        if isRunning &> /dev/null; then
            echo "$on$id" # on
        else
            echo "$off"
        fi
}

statussimple () {

        if isRunning &> /dev/null; then
            echo "$on$id" # on
        else
            echo "$off"
        fi
}

# continous (better version would spy on mpv stream change)
status4tint () {
    
    >&2 printf '\e[2J'
    readid && radio && echoid
    statussimple
    
    while inotifywait -e modify "$mpvtxt" > /dev/null 2>&1 ; do
    
        # https://gitlab.com/o9000/tint2/issues/676
        >&2 printf '\e[2J' 
        
        readid && radio && echoid 
        statussimple
    
    done
    
}

getnotify () {
    # only last one of this two should be shown, where icy-title could be empty
    # get last one and if icy-title and if empty and if playing is later ... mkay.
    
    if ! grep -E "icy-title:|Playing:" "$mpvtxt" | tail -n 1 | grep -wv "^ icy-title: $" > /dev/null \
    || grep -E "icy-title:|Playing:" "$mpvtxt" | tail -n 1 | grep "Playing:" > /dev/null ; then
    
        # 'icy-title' is empty or 'playing' is later in the list, get playing instead
        tmpinfo="$(sed -n 's/^Playing: //p' "$mpvtxt" | tail -1)"
    
    else
    
        # icy-title is fine, lets use that
        tmpinfo="$(sed -n 's/^ icy-title: //p' "$mpvtxt" | tail -1)"
    
    fi
}

spam () { # continous = never exits, kill with killall radioClicky
    if [ -f "$mpvtxt" ]; then
    
        while inotifywait -e modify "$mpvtxt" > /dev/null 2>&1 ; do
        
            sleep 3
            tmpinfo="$(sed -n 's/^ icy-title: //p' "$mpvtxt" | tail -1)"

                if ! [[ -z "$tmpinfo" ]] && [ "$tmpinfo" != "$tmpold" ]; then # if not empty and if not the same as old one
                    echo "$tmpinfo"
                    
                    tty -s; # if not run from terminal, show notify popup as well
                    if ! [ "0" == "$?" ]; then
                        notify-send -u normal "$tmpinfo" 2>/dev/null
                    fi
                    
                fi
            tmpold="$tmpinfo"
            
            
        done
        
    fi
}

icy () {
    
    # lets just ask mpv
    if isRunning; then
        echo '{ "command": ["get_property", "metadata"] }' | socat - "$pipe" | jq -r .data | grep -i -v -E "{|}|icy-pub" | sed -e 's/^[ \t]*//' | sed -e 's/\"//g'
        
        #echo '{ "command": ["get_property", "metadata"] }' | socat - "$pipe" | jq -r .data
        
    else
        echo "player must be running and playing and streaming."
    fi
    
}

metacache () {
    
    icy > "$metacache/$id"
    
}

sysinfo () {

        mpv --version | head -n 1 | grep -v '^$' 
        mpv --list-options | grep -i -E "lavfi" 
        socat -V | head -n 2 | tail -n 1 
        tint2 --version 
        notify-send --version 
        inotifywait -h | head -n 1 
        sed --version | head -n 1 
        grep --version | head -n 1 
        pgrep --version 
        streamripper --version 
        wget --version | head -n 1 
        curl --version | head -n 1 
        jq --version 
        # host name, distroname
        rel=$(lsb_release -ds 2>/dev/null || cat /etc/*release 2>/dev/null | head -n1 || uname -om)
        kernel=$(uname -r)
        distro="$HOSTNAME @ $rel"
        echo "$distro / $kernel"
}


# main
if [ "$1" == "toggle" ] || [ "$1" == "t" ]; then

    if isRunning; then
        off
    else
        on
    fi
    
elif [ "$1" == "test" ]; then

    isRunning

elif [ "$1" == "play" ] || [ "$1" == "p" ]; then
    
    if ! isRunning; then
        on
    fi

elif [ "$1" == "stop" ] || [ "$1" == "s" ]; then
    
    if isRunning; then
        off
    fi
    
elif [ "$1" == "notify" ] || [ "$1" == "n" ]; then
    
    getnotify
    >&2 echo "$tmpinfo"
    
    tty -s; # if not run from terminal, show notify popup as well
    if ! [ "0" == "$?" ]; then
        notify-send -u normal "$tmpinfo" 2>/dev/null
    fi
    

elif [ "$1" == "switch" ]; then
    
    # "$2" must be + or -
    switch "$2"

elif [ "$1" == "+" ]; then
    
    switch +
    
elif [ "$1" == "-" ]; then
    
    switch -
    
elif [[ $1 =~ ^-?[0-9]+$ ]]; then # if integer

    switch "$1"
    
elif [ "$1" == "last" ] || [ "$1" == "l" ]; then
    
    if [ -f "$mpvtxt" ]; then
        sed -n 's/^ icy-title: //p' "$mpvtxt" | grep -v '^$' | uniq | tail -n 21
    fi
    
elif [ "$1" == "id" ] || [ "$1" == "i" ]; then

    notifyid
    echoid
    
elif [ "$1" == "openbox" ]; then # openbox pipe menu

    # header
    echo "<openbox_pipe_menu>"
    
        for i in "${!array[@]}"; do

            label="${array[i]}"

            # crop label and remove http, https
            label="$(sed 's~http[s]*://~~g' <<< "${label:0:100}")"
        
            if [ "$i" == "$id" ]; then
                title="$(status) $label" # $(status) ,removed $i here, new status got one included.
            else
                title="$i $label"
            fi
            
                echo "<item label='$title'>"
                echo "    <action name='Execute'>"
            # use active station as on/off switch
            if [ "$i" == "$id" ]; then
                echo "        <execute>radioClicky toggle</execute>"
            else
                echo "        <execute>radioClicky switch $i</execute>"
            fi
                echo "    </action>"
                echo "</item>"

    done

    # footer
    echo "</openbox_pipe_menu>"

elif [ "$1" == "head" ]; then # perl HEAD

    if [ -f "$mpvtxt" ]; then
        tmpinfo="$(sed -n 's/^Playing: //p' "$mpvtxt" | tail -1)"
        echo "$tmpinfo"
        HEAD "$tmpinfo"
    fi    
    
elif [ "$1" == "curl" ]; then # curl icy metadata

    if [ -f "$mpvtxt" ]; then
        tmpinfo="$(sed -n 's/^Playing: //p' "$mpvtxt" | tail -1)"
        echo "$tmpinfo"
        curl -s -m 1 -H "Icy-MetaData: 1" -v "$tmpinfo" >/dev/null
    fi
    
elif [ "$1" == "icy" ] || [ "$1" == "c" ]; then # head/curl icy metadata filtered for humanity

    icy
    
elif [ "$1" == "rec" ]; then # streamripper record
    
    tmpinfo="$(sed -n 's/^Playing: //p' "$mpvtxt" | tail -1)"
    
    shift # propagate all remaining parameters to streamripper
    echo "$tmpinfo recording to $recPath using streamripper, ctrl+c to stop"
    if ! [[ -z "$@" ]]; then # echo remaining parameters if there are some
        echo "$@"
    fi
    streamripper "$tmpinfo" -d "$recPath" -s -u "WinampMPEG/5.0" "$@"

elif [ "$1" == "wrec" ]; then # wget record

    tmpinfo="$(sed -n 's/^Playing: //p' "$mpvtxt" | tail -1)"
    echo "$tmpinfo recording to $recPath using wget, ctrl+c to stop"
    
        # random word dictionary function
        randomword()  {
            dict="/usr/share/dict/words"
            shuf -n1 "$dict" | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]'
        }
        word=$(randomword)
        # if dict gets us null length then replace with something else
        [ -z "$word" ] && word="$HOSTNAME"
        [ -z "$word" ] && word="rec"
        date="$(date +%H%M%^b%d%y)"

        #echo "$word.$date.mp3"
        
        wget -O "$recPath/$word.$date.audio" "$tmpinfo"
    
elif [ "$1" == "spam" ]; then # spamme continous

    spam
    
elif [ "$1" == "find" ] || [ "$1" == "f" ]; then # search cached metadata

    #shift
    cd "$metacache" || exit
    grep -i -E "$2" -- * | sort -g
    
elif [ "$1" == "jump" ]; then # jump

    beforeid="$id"

    for i in "${!array[@]}"; 
        do
            switch "$i"
            if [[ $2 =~ ^[0-9]+$ ]]; then # if positive integer
                sleep "$2"
            else
                sleep 30
            fi
            
        done
        
    # back to where we were
    switch "$beforeid"
    
elif [ "$1" == "list" ] || [ "$1" == "ls" ]; then

    if [[ $2 =~ ^-?[0-9]+$ ]]; then # if integer
        
        listrange "$2"

    else
        list
    fi

elif [ "$1" == "help" ] || [ "$1" == "h" ]; then

cat << EOF
radioClicky requires: 
reasonably modern mpv, socat, notify-send, sed, grep, pgrep (procps), latest tint2, inotify-tools, jq

radioClicky     # show status
toggle or t     # on/off
play or p       # on
stop or s       # off
notify or n     # notify-send icy-title or stream url
last or l       # cli print last 21 quasi-unique icy-titles
list or ls      # cli list streams
ls 3            # cli list around active id
switch          # next station
switch + or +   # next station
switch - or -   # previous station
switch 3 or 3   # station with id 3
id or i         # echo station id, url
openbox         # openbox pipemenu
head            # cli perl HEAD to last active stream
curl            # cli curl icy metadata sniffing on last active stream
icy or c        # cli metadata for human (will ask mpv), needs 'jq'
rec             # cli streamripper recording (additional connection, doubles bandwidth)
wrec            # cli wget recording (only use if streamripper fails or if you need instant recording)
spam            # something to be run from your gmrun or cli or autostart, 
                # will notify on icy-title change (continous),
                # kill with 'killall radioClicky'
tint2           # tint2rc example
sysinfo         # sysinfo (mpv --version and such)
statuscont      # continus for tint2
find or f arg   # search cached metadata (arg is "rock" or "pop|rock" for OR)
jump            # jump through all, 30 seconds each
jump 7          # jump through all, 7 seconds each
help or h       # this help
EOF

elif [ "$1" == "tint2" ]; then

cat << EOF
a. to tint2rc add a new E to your panel_items, so it might look like:

    panel_items = TESECEE

b. add this to strategic place in your tint2rc (bottom should do):

#-------------------------------------
execp = new
execp_centered = 1
execp_has_icon = 0
execp_command = radioClicky statuscont       # echo status
execp_continuous = 1 
execp_font = cuprum 12
execp_font_color = #111111 70
execp_padding = 0 0 0
execp_mclick_command = radioClicky t         # on/off
execp_rclick_command = radioClicky n         # notify (icy-title)
execp_lclick_command = radioClicky i         # station id
execp_dwheel_command = radioClicky +         # next
execp_uwheel_command = radioClicky -         # prev
#execp_tooltip = radio
EOF

elif [ "$1" == "sysinfo" ]; then

    sysinfo
    
elif [ "$1" == "statuscont" ]; then

    status4tint

else # status

    status

fi


## openbox pipemenu, to menu.xml add:
# <separator/>
# <menu id="radio" label="radio" execute="radioClicky openbox" />
# <separator/>

