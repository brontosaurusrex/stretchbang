#!/bin/bash

array=(
http://wfmu.org/wfmu.pls
http://wruv.org/wruv256.m3u
http://listen.xray.fm:8000/stream
https://kexp-mp3-128.streamguys1.com/kexp128.mp3
http://relay.181.fm:8094
http://relay.181.fm:8008
http://relay.181.fm:8064
http://streaming.radionomy.com:80/12Bar
http://relay.181.fm:8000
http://relay.181.fm:8002
)

extfile="$HOME/bin/radiolist"
# add external file to array if there is one
if [ -f "$extfile" ]; then
    while read -r line ; do
        array+=($line)
    done < "$extfile"
fi

store="$HOME/tmp"
pidPath="$store/radiopid"
mpvtxt="$store/mpv.txt"
#mpverr="$store/mpv.err"
idPath="$store/id"

mkdir -p "$store"

# store station id to file
storeid () {
    echo "$id" > "$idPath"
}

# should read id number from store
if [ -f "$idPath" ]; then
    id=$(cat "$idPath")
else
    id="0"
    storeid
fi

on=" / "
off=" \\ "

radio=${array[$id]}

echoid () {
    >&2 echo "$id $radio"
}

notifyid () {
    notify-send -u normal "$id $radio" 2>/dev/null
}

croplog () {
    #>&2 echo "croplog"
    # crop and clean log, this shall only happen when mpv is not writing to file
    file="$mpvtxt"
    if [ -f "$file" ]; then
        # let's just keep 'icy-title' and 'Playing' lines and crop to last 100 lines
        grep -E "icy-title:|Playing:" "$mpvtxt" | grep -wv "^ icy-title: $" | uniq | tail -n 100 > "$file.tmp" && cp "$file.tmp" "$file" && rm "$file.tmp"
        touch "$file"
    fi
}

off () {
    # if file
    [ -f "$pidPath" ] && Rpid=$(cat "$pidPath")
    # if var
    [[ ! -z "$Rpid" ]] && kill "$Rpid"; rm "$pidPath"
    echo "$off" # off
    croplog
}

on () {
    mpv --no-config --no-video --no-resume-playback --no-ytdl --cache-secs 7 --af=lavfi=[loudnorm=LRA=10:I=-17] "$radio" >> "$mpvtxt" 2> /dev/null &

    Rpid="$!"
    echo "$Rpid" > "$pidPath"
    echo "$on" # on
}

switch () {

    # next station
    if [ "$1" == "+" ]; then
        ((id+=1))
    # previous station
    elif [ "$1" == "-" ]; then
        ((id-=1))
    # exact id (check if integer)
    elif [[ $1 =~ ^-?[0-9]+$ ]]; then
        id="$1"
    else # next station, assume + if nothing is send
        ((id+=1))
    fi
    
    max=$(( ${#array[@]} - 1 ))
    
    if (( id > max )); then
       id=0
    elif (( id < 0 )); then
       id="$max"
    fi
    
    radio=${array[$id]}

    echoid
    storeid
    off &> /dev/null
    on
    #notifyid
    
}

list () {
 
    for i in "${!array[@]}"; 
        do
            if (( id == i )); then
                echo "$(statussimple)$i ${array[i]}"
            else
                echo "$i ${array[i]}"
            fi
        done
    
}

listrange () {

    around="$1"
    max=$(( ${#array[@]} - 1 ))
    
    if (( around * 2 > max + 1)); then
    
        around=$(( max / 2 ))
        #echo "around $around"
    
    fi
    
    for (( i = id - around; i <= id + around; ++i )); do

            # limiter    
            if (( i < 0 )); then
                real=$((max + i + 1))
                
            elif (( i > max )); then
                real=$((i - max - 1))
            else
                real="$i"
            fi

            # action
            if (( id != i )); then
                echo "$real" "${array[real]}"; 
            else
                echo "$(statussimple)$real" "${array[real]}";
            fi

    done 
    
}

status () {
    echoid # for tooltip
    if [ -f "$pidPath" ]; then
        Rpid=$(cat "$pidPath")

        # check if player with that pid is actually running, else delete pidfile, and echo off
        if pgrep -x mpv | grep "$Rpid" &> /dev/null; then
            echo "$on" # on
        else
            rm "$pidPath"
            echo "$off"
        fi

    else

        echo "$off"
            
    fi
}

statussimple () {

    status &> /dev/null
    if [ -f "$pidPath" ]; then
            echo -n "$on" # on
    else
            echo -n "$off"
    fi

}

getnotify () {
    # only last one of this two should be shown, where icy-title could be empty
    # get last one and if icy-title and if empty ...
    if ! grep -E "icy-title:|Playing:" "$mpvtxt" | tail -n 1 | grep -wv "^ icy-title: $" > /dev/null ; then
        # icy-title is empty, get playing instead
        tmpinfo="$(sed -n 's/^Playing: //p' "$mpvtxt" | tail -1)"
    else
        # icy-title is fine, lets use that
        tmpinfo="$(sed -n 's/^ icy-title: //p' "$mpvtxt" | tail -1)"
    fi
}

spam () { # continous = never exits, kill with killall radioClicky
    if [ -f "$mpvtxt" ]; then
    
        while inotifywait -e modify "$mpvtxt" > /dev/null 2>&1 ; do
        
            sleep 3
            tmpinfo="$(sed -n 's/^ icy-title: //p' "$mpvtxt" | tail -1)"

                if ! [[ -z "$tmpinfo" ]] && [ "$tmpinfo" != "$tmpold" ]; then # if not empty and if not the same as old one
                    echo "$tmpinfo"
                    
                    tty -s; # if not run from terminal, show notify popup as well
                    if ! [ "0" == "$?" ]; then
                        notify-send -u normal "$tmpinfo" 2>/dev/null
                    fi
                    
                fi
            tmpold="$tmpinfo"
            
            
        done
        
    fi
}        

# main
if [ "$1" == "toggle" ] || [ "$1" == "t" ]; then

    if [ -f "$pidPath" ]; then
        off
    else
        on
    fi

elif [ "$1" == "play" ] || [ "$1" == "p" ]; then
    
    if ! [ -f "$pidPath" ]; then
        on
    fi

elif [ "$1" == "stop" ] || [ "$1" == "s" ]; then
    
    if [ -f "$pidPath" ]; then
        off
    fi
    
elif [ "$1" == "notify" ] || [ "$1" == "n" ]; then
    
    getnotify
    >&2 echo "$tmpinfo"
    
    tty -s; # if not run from terminal, show notify popup as well
    if ! [ "0" == "$?" ]; then
        notify-send -u normal "$tmpinfo" 2>/dev/null
    fi
    

elif [ "$1" == "switch" ]; then
    
    # "$2" must be + or -
    switch "$2"

elif [ "$1" == "+" ]; then
    
    switch +
    
elif [ "$1" == "-" ]; then
    
    switch -
    
elif [[ $1 =~ ^-?[0-9]+$ ]]; then # if integer

    switch "$1"
    
elif [ "$1" == "last" ] || [ "$1" == "l" ]; then
    
    if [ -f "$mpvtxt" ]; then
        sed -n 's/^ icy-title: //p' "$mpvtxt" | grep -v '^$' | uniq | tail -n 12
    fi
    
elif [ "$1" == "id" ] || [ "$1" == "i" ]; then

    notifyid
    echoid
    
elif [ "$1" == "openbox" ]; then # openbox pipe menu

    # header
    echo "<openbox_pipe_menu>"
    
    # stations
    count="0"
    for label in "${array[@]}"
        do
            # crop label and remove http, https
            label="$(sed 's~http[s]*://~~g' <<< "${label:0:50}")"
        
            if [ "$count" == "$id" ]; then
                title="$(status) $count $label" # $(status) 
            else
                title="$count $label"
            fi
            
            # mark active station with separator at the top
            # [ "$count" == "$id" ] && echo "<separator />"

                echo "<item label='$title'>"
                echo "    <action name='Execute'>"
            # use active station as on/off switch
            if [ "$count" == "$id" ]; then
                echo "        <execute>radioClicky toggle</execute>"
            else
                echo "        <execute>radioClicky switch $count</execute>"
            fi
                echo "    </action>"
                echo "</item>"
                
            # mark active station with separator at the bottom as well
            # [ "$count" == "$id" ] && echo "<separator />"

            ((count++))
        done

    # footer
    echo "</openbox_pipe_menu>"

elif [ "$1" == "head" ]; then # perl HEAD

    if [ -f "$mpvtxt" ]; then
        tmpinfo="$(sed -n 's/^Playing: //p' "$mpvtxt" | tail -1)"
        echo "$tmpinfo"
        HEAD "$tmpinfo"
    fi    
    
elif [ "$1" == "curl" ]; then # curl icy metadata

    if [ -f "$mpvtxt" ]; then
        tmpinfo="$(sed -n 's/^Playing: //p' "$mpvtxt" | tail -1)"
        echo "$tmpinfo"
        curl -s -m 1 -H "Icy-MetaData: 1" -v "$tmpinfo" >/dev/null
    fi
    
elif [ "$1" == "spam" ]; then # spamme continous

    spam
    
elif [ "$1" == "list" ] || [ "$1" == "ls" ]; then

    if [[ $2 =~ ^-?[0-9]+$ ]]; then # if integer
        
        listrange "$2"

    else
        list
    fi

elif [ "$1" == "help" ] || [ "$1" == "h" ]; then

cat << EOF
radioClicky requires: 
reasonably modern mpv, notify-send, sed, pgrep (procps), latest tint2, inotify-tools (optional, for spam function)

radioClicky     # show status
toggle or t     # on/off
play or p       # on
stop or s       # off
notify or n     # notify-send icy-title or stream url
last or l       # cli print last 12 quasi-unique icy-titles
list or ls      # cli list streams
ls 3            # cli list around active id
switch          # next station
switch +        # next station
+               # next station
switch -        # previous station
-               # previous station
switch 3        # station with id 3
3               # station with id 3
id or i         # echo station id, url
openbox         # openbox pipemenu
head            # cli perl HEAD to last active stream
curl            # cli curl icy metadata sniffing on last active stream
spam            # something to be run from your gmrun or cli or autostart, 
                # will notify on icy-title change (continous),
                # kill with 'killall radioClicky'
help or h       # this help
EOF

else # status

    status

fi


## tint2rc executor, to tint2rc 
## add a new E to line that starts with
## panel_items = 

#execp = new
#execp_centered = 1
#execp_has_icon = 0
#execp_command = radioClicky                  # echo status / or \
#execp_continuous = 0
#execp_font = cuprum 12
#execp_font_color = #111111 70
#execp_padding = 0 0 0
#execp_lclick_command = radioClicky toggle    # on/off
#execp_rclick_command = radioClicky notify    # echo icy-title or playing
#execp_mclick_command = radioClicky id        # echo station id, url
#execp_interval = 12                          # echo status / or \ every N seconds
#execp_dwheel_command = radioClicky switch +  # switch to next station
#execp_uwheel_command = radioClicky switch -  # switch to previous station

## openbox pipemenu, to menu.xml add:
# <separator/>
# <menu id="radio" label="radio" execute="radioClicky openbox" />
# <separator/>

