#!/bin/bash

# watermark one image with another

# usage: watermark back.png logo.png out.png 20

#http://www.imagemagick.org/discourse-server/viewtopic.php?t=33782

debug="1"

# checks
command -v convert >/dev/null 2>&1 || { echo "I need imagemagick convert, exiting." >&2; exit 1; }

# Check if enough parameters were passed
if (($# < 3)) || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then

    echo "Must be 3 or 4 arguments, example:"
    echo
    echo "watermark back.png logo.png out.png 20"
    echo "                                    ^"
    echo "                             logo size in percents (can be omitted)"

    exit 1

fi

# tmp dir http://mywiki.wooledge.org/BashFAQ/062
tmp="/tmp/$RANDOM-$$"
trap '[ -n "$tmp" ] && rm -fr "$tmp"' EXIT
mkdir -m 700 "$tmp" || { echo '!! unable to create a tmpdir' >&2; tmp=; exit 1; }

# input
back="$1"
logo="$2"
 out="$3"
 pct="$4"
 
grvt="center"

# out breakdown 
file=$(readlink -f "$out")       # quasi absolute
baseext=$(basename "${out}")     # or
base="${baseext%.*}"             # file
ext="${file##*.}"                # ext
dir=${file%/*}                   # directory

if [ "$ext" != "png" ] && [ "$ext" != "jpg" ]; then
    ext="png"
fi

# echo
if (( debug )); then
    echo "file $file"
    echo "baseext $baseext" 
    echo "base $base" 
    echo "ext $ext" 
    echo "dir $dir"
    echo
fi

# exit if no ext
[[ -z "$ext" ]] && exit 1 

# How big will the logo be
[[ -z "$pct" ]] && pct=25
 
# How big will the logo really be  
amt=$(convert -ping "$back" -format "%[fx:($pct*min(w,h)/100)^2]" info:)
(( debug )) && echo "$amt"     

# methods to try https://imagemagick.org/script/compose.php
method=( overlay plus darken lighten src-over multiply screen pegtop-light pin-light )

# resize and pad-bottom logo
convert "$logo" -resize "$amt"@ "$tmp/logoresized_.png"
# pad bottom for some% so that the final composition will have logo a bit higher than geometric center
convert "$tmp/logoresized_.png" -gravity north -background transparent -extent \
"$(identify -format '%Wx%[fx:H*1.1]' "$tmp/logoresized_.png")" \
"$tmp/logoresized.png" || exit 1
# some cleaning
rm "$tmp/logoresized_.png"

# action functions
many () {
    
    #set -x
    for var in "${method[@]}"
    do
        echo "${var}"

        touch "${dir}/${base}-${var}.${ext}" || exit 1
        convert "$back" "$tmp/logoresized.png" -gravity "${grvt}" -compose "${var}" -depth 8 +repage -composite "$tmp/one.png" || exit 1
        # tone down
        convert "$back" "$tmp/one.png" -define compose:args=90 -compose blend -depth 8 +repage -composite "${dir}/${base}-${var}.${ext}" || exit 1
        
        echo "${base}-${var}.${ext}"
        
        # The "at" symbol '@', will resize an image to contain no more than the given number of pixels. 
        # "$logo" -trim -resize "$amt"@ # ?

    done
}

justmask () {
 
        # copy alpha from logo to back
        convert "$back" \( "$tmp/logoresized.png" -channel a -separate +channel \) -alpha off -gravity "${grvt}" -compose copy_opacity -composite "$tmp/backWithAlpha.png" || exit 1
        
        # slap back with alpha onto back
        echo "back"
        convert "$back" "$tmp/backWithAlpha.png" -gravity "${grvt}" -compose "screen" -depth 8 +repage -composite "$tmp/two.png" || exit 1
        # tone down
        convert "$back" "$tmp/two.png" -define compose:args=75 -compose blend -depth 8 +repage -composite "${dir}/${base}-back.${ext}" || exit 1
        
        # "${dir}/${base}-back.${ext}"
        echo "${base}-back.${ext}"
   
}

lines () {
    
    # make empty image
    convert -size "${width}"x1 xc:black "$tmp/lines.png"

    # random
    random () {
        # 0 - 255
        r=$(( RANDOM % 256 ))
        g=$(( RANDOM % 256 ))
        b=$(( RANDOM % 256 ))

        # 1 - 100
        linewidth=$(( RANDOM % 50 + 1 ))

        # 0 - 1920
        linepos=$(( RANDOM % width ))
    }


    # action
    for ((i=1;i<=50;i++)); 
    do
        echo -n "$i "
        random
        mogrify -stroke "rgba(${r},${g},${b},0.25)" -linewidth "${linewidth}" \
        -draw "line ${linepos},0 ${linepos},10" "$tmp/lines.png"

    done
    echo
    
    # bw
    mogrify -scale "${alphasize}"\! -colorspace gray "$tmp/lines.png"
    
}

destroyedmask () {
    
        # extract alpha from logo to rgb
        convert "$tmp/logoresized.png" -alpha extract "$tmp/alpha.png"
        
        # What is the size of that alpha in XxY format
        alphasize="$(convert -ping "$tmp/alpha.png" -format "%wx%h" info:)"
        (( debug )) && echo "$alphasize"
        
        # lines
        width="$(convert -ping "$tmp/alpha.png" -format "%w" info:)"
        lines # must know the size ^ (alphasize and width)
        #cp "$tmp/lines.png" "${dir}/lines.png"
        
        #set -x
        # mix with some other mask, but clip/limit somehow
        convert "$tmp/lines.png" "$tmp/alpha.png" -gravity center -compose minus -depth 8 +repage -composite  -auto-level -crop "${alphasize}+0+0" "$tmp/alphacomp.png" || exit 1
    
        # replace mask
        convert "$tmp/logoresized.png" "$tmp/alphacomp.png" -alpha off -compose CopyOpacity -auto-level -composite "$tmp/logonewalpha.png" || exit 1
        
        # replace mask and rgb to black
        convert -size "${alphasize}" xc:black "$tmp/alphacomp.png" -alpha off -compose CopyOpacity -auto-level -composite "$tmp/logonewalphaBlack.png" || exit 1
    
        # compose, use new mixed mask
        echo "destroyed mask"
        convert "$back" "$tmp/logonewalpha.png" -gravity center -compose src-over -depth 8 +repage -composite "${dir}/${base}-destroyedDefault.${ext}" || exit 1
        
        echo "${base}-destroyedDefault.${ext}"
                
        # compose, use new mixed mask, fill front with black
        echo "destroyed mask + fill black"
        convert "$back" "$tmp/logonewalphaBlack.png" -gravity center -compose src-over -depth 8 +repage -composite "${dir}/${base}-destroyedBlack.${ext}" || exit 1
        
        echo "${base}-destroyedBlack.${ext}"
        
        # copy with destroyed mask (similar to justmask method)
        echo "destroyed mask plus"
        # copy alpha from destroyed logo to back
        convert "$back" \( "$tmp/logonewalpha.png" -channel a -separate +channel \) -alpha off -gravity "${grvt}" -compose copy_opacity -composite "$tmp/backWithAlpha2.png" || exit 1
        # slap back with alpha onto back
        convert "$back" "$tmp/backWithAlpha2.png" -gravity "${grvt}" -compose "screen" -depth 8 +repage -composite "$tmp/two2.png" || exit 1
        # tone down
        convert "$back" "$tmp/two2.png" -define compose:args=75 -compose blend -depth 8 +repage -composite "${dir}/${base}-destroyedBack.${ext}" || exit 1
        
        echo "${base}-destroyedBack.${ext}"
}


# action
#many
justmask
destroyedmask
