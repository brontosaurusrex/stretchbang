#!/bin/bash

# watermark one image with another

# usage: watermark back.png logo.png out.png 20

#http://www.imagemagick.org/discourse-server/viewtopic.php?t=33782

debug="1"

# checks
command -v convert >/dev/null 2>&1 || { echo "I need imagemagick convert, exiting." >&2; exit 1; }

# Check if enough parameters were passed
if (($# < 3)) || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then

    echo "Must be 3 or 4 arguments, example:"
    echo
    echo "watermark back.png logo.png out.png 20"
    echo "                                    ^"
    echo "                             logo size in percents (can be omitted)"

    exit 1

fi

# tmp dir http://mywiki.wooledge.org/BashFAQ/062
tmp="/tmp/$RANDOM-$$"
trap '[ -n "$tmp" ] && rm -fr "$tmp"' EXIT
mkdir -m 700 "$tmp" || { echo '!! unable to create a tmpdir' >&2; tmp=; exit 1; }

# input
back="$1"
logo="$2"
 out="$3"
 pct="$4"

# out breakdown 
file=$(readlink -f "$out")       # quasi absolute
baseext=$(basename "${out}")     # or
base="${baseext%.*}"             # file
ext="${file##*.}"                # ext
dir=${file%/*}                   # directory
 
# echo
if (( debug )); then
    echo "file $file"
    echo "baseext $baseext" 
    echo "base $base" 
    echo "ext $ext" 
    echo "dir $dir"
    echo
fi

# exit if no ext
[[ -z "$ext" ]] && exit 1 

# How big will the logo be
[[ -z "$pct" ]] && pct=25
 
# How big will the logo really be  
amt=$(convert -ping "$back" -format "%[fx:($pct*min(w,h)/100)^2]" info:)
(( debug )) && echo "$amt"     

# methods to try https://imagemagick.org/script/compose.php
method=( overlay plus darken lighten src-over multiply screen pegtop-light pin-light )

# resize logo
convert "$logo" -resize "$amt"@ "$tmp/logoresized.png"

one () {
    
    #set -x
    for var in "${method[@]}"
    do
        echo "${var}"

        touch "${dir}/${base}-${var}.${ext}" || exit 1
        convert "$back" "$tmp/logoresized.png" -gravity center -compose "${var}" -depth 8 +repage -composite "$tmp/one.png" || exit 1
        # tone down
        convert "$back" "$tmp/one.png" -define compose:args=90 -compose blend -depth 8 +repage -composite "${dir}/${base}-${var}.${ext}" || exit 1
        
        echo "${base}-${var}.${ext}"
        
        # The "at" symbol '@', will resize an image to contain no more than the given number of pixels. 
        # "$logo" -trim -resize "$amt"@ # ?

    done
}

two () {
 
        # copy alpha from logo to back
        convert "$back" \( "$tmp/logoresized.png" -channel a -separate +channel \) -alpha off -gravity center -compose copy_opacity -composite "$tmp/backWithAlpha.png" || exit 1
        
        # slap back with alpha onto back
        echo "back"
        convert "$back" "$tmp/backWithAlpha.png" -gravity center -compose "screen" -depth 8 +repage -composite "$tmp/two.png" || exit 1
        # tone down
        convert "$back" "$tmp/two.png" -define compose:args=75 -compose blend -depth 8 +repage -composite "${dir}/${base}-back.${ext}" || exit 1
        
        # "${dir}/${base}-back.${ext}"
        echo "${base}-back.${ext}"
       
        #convert new.tif \( input.tif -channel a -separate +channel \) -alpha off -compose copy_opacity -composite new.tif
   
}


# action
one && two
