#!/bin/bash

# noiseAndDirt (lite)

# give me some noiseAndDirt for wallpaper

# required: imagemagick, nitrogen, xrandr

# usage: noiseAndDirt --help

# benchmark start
START=$(date +%s.%N)

# checks
command -v convert >/dev/null 2>&1 || { echo "I need imagemagick convert, exiting." >&2; exit 1; }
command -v nitrogen >/dev/null 2>&1 || { echo "I need nitrogen, exiting." >&2; exit 1; }
command -v xrandr >/dev/null 2>&1 || { echo "I need xrandr, exiting." >&2; exit 1; }

# store & vars
tmp="/tmp/noiseAndDirt-$RANDOM-$$"
trap '[ -n "$tmp" ] && rm -fr "$tmp"' EXIT # comment out this line to keep images
mkdir -m 700 "$tmp" || { echo '!! unable to create a tmpdir' >&2; tmp=; exit 1; }

noise="$tmp/noise.png"   # noise
dirt="$tmp/dirt.png"     # dirt
dirt2="$tmp/dirt2.png"   # dirt2
dirt3="$tmp/dirt3.png"   # dirt3
tmpcomp="$tmp/tmp.png"   # tmpcomp
tmpcomp2="$tmp/tmp2.png" # tmpcomp2
tmpcomp3="$tmp/tmp3.png" # tmpcomp3
final="$tmp/final.png"   # final

debug="0"

# print progress
dot () {
    printf "."
}

touch "$noise" "$dirt" "$dirt2" "$tmpcomp" "$final" || exit

# resolution
mx=1920; my=1200

# help
if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then

cat <<EOF
Order of parameters does matter:

    noiseAndDirt color-preset brightnes saturation hue level-dynamics level-start
    # color-preset may be omited

examples:

    noiseAndDirt                           # default
    noiseAndDirt deep                      # with color preset 'deep'
    noiseAndDirt deep +                    # with color preset 'deep' and 10% brighter
    noiseAndDirt - +++                     # default, but 10% darker and 30% more saturated
    noiseAndDirt deep _ +++++ _ + ---      # preset 'deep' and more saturated,
                                           # slightly more dynamics and darker level start.
    noiseAndDirt deep -- ++ -------------- # A lil green
    noiseAndDirt -- +++++++++++++++++      # darker but more colorful
    
alias examples:    
    
    alias greendirt='noiseAndDirt deep -- ++ --------------'
    alias bluedirt='noiseAndDirt deep - ++++++++++ _ + --'
    alias bluedarkdirt='noiseAndDirt -- +++++++++++++++++'
    alias pinkdirt='noiseAndDirt deep _ + ++++++++++++++++++++++++++++ _ +++'
    alias nightdirt='noiseAndDirt - +++ +++++++ +++ ---'
    alias violetdirt='noiseAndDirt deep ++++ ++++ ++++++++++++ _ ++'
    alias nicedirt='noiseAndDirt deep _ +++++ _ ----------- ----'
    alias nicedirt2='noiseAndDirt deep - ++++ ----------------------------------------------------------------------------------------------- ++'
EOF

exit 

fi

# fill colors
tilix="#263945" ; crunch="#222D32" ; deep="#0D314D" ; royal="#2842B3" ; adapta="#222D32" ; deep2="#192F49" ; night="#1C2E7D"

case "$1" in
     tilix)          
          color="$tilix"
          shift
          ;;
     crunch)
          color="$crunch"
          shift
          ;;
     deep)
          color="$deep"
          shift
          ;; 
     royal)
          color="$royal"
          shift
          ;;
     adapta)
          color="$adapta"
          shift
          ;;
     deep2)
          color="$deep2"
          shift                    
          ;; 
     night)
          color="$night"
          shift                    
          ;; 
     *)
          color="$tilix"
          ;;
esac

# modulate bright,color,hue
def="100" ; bri="100" ; col="100" ; hue="100"

# bright
mul="0"
if [[ "$1" == +* ]]; then # lighter
    mul=$(( 10 * ${#1} )) ; bri=$(( def + mul ))    
    shift    
elif [[ "$1" == -* ]]; then # darker
    mul=$(( 10 * ${#1} )) ; bri=$(( def - mul ))
    shift
elif [[ "$1" == "_" ]]; then # the same
    shift
fi

# saturation
mul="0"
if [[ "$1" == +* ]]; then # more saturated
    mul=$(( 10 * ${#1} )) ; col=$(( def + mul ))    
    shift    
elif [[ "$1" == -* ]]; then # less saturated
    mul=$(( 10 * ${#1} )) ; col=$(( def - mul ))
    shift
elif [[ "$1" == "_" ]]; then # the same
    shift
fi

# hue
mul="0"
if [[ "$1" == +* ]]; then # more saturated
    mul=$(( 2 * ${#1} )) ; hue=$(( def + mul ))    
    shift    
elif [[ "$1" == -* ]]; then # less saturated
    mul=$(( 2 * ${#1} )) ; hue=$(( def - mul ))
    shift
elif [[ "$1" == "_" ]]; then # the same
    shift
fi

# level dynamics/range
low="5" ; high="59"

mul="0"
if [[ "$1" == +* ]]; then # higher dynamics
    mul=${#1} ; low=$(( low - mul )) ; high=$(( high + mul )) 
    shift    
elif [[ "$1" == -* ]]; then # less dynamics
    mul=${#1} ; low=$(( low + mul )) ; high=$(( high - mul ))
    shift
elif [[ "$1" == "_" ]]; then # the same
    shift
fi

# level start
mul="0"
if [[ "$1" == +* ]]; then # higher (low and high)
    mul=${#1} ; low=$(( low + mul )) ; high=$(( high + mul )) 
    shift    
elif [[ "$1" == -* ]]; then # lower (low and high)
    mul=${#1} ; low=$(( low - mul )) ; high=$(( high - mul ))
    shift
elif [[ "$1" == "_" ]]; then # the same
    shift
fi

# noise
noise () {
(( debug )) && set -x
convert -size "${mx}x${my}" xc:"gray(50%)" -seed "${RANDOM}" -attenuate 2 +noise poisson +level 0%,80% +repage "$noise"
(( debug )) && set +x
dot
}
# +level 18%,24%
# -sharpen 0x1
# -modulate bright,color,hue

# dirt
dirt () {
(( debug )) && set -x
convert "$noise" -canny 0x.3+0%+50% -blur 0x.3 -negate +level 0%,80% "$dirt"
dot
}

# dirt2
dirt2 () {
convert "$noise" -canny 0x3+0%+20% -blur 0x.5 -negate +level 0%,30% "$dirt2"
dot
}

# dirt3 (big and blurry)
dirt3 () {
convert "$noise" -canny 0x50+0%+50% -blur 0x140 -negate +level 0%,60% "$dirt3"
(( debug )) && set +x
dot
}

# compose
compose () {
(( debug )) && set -x
convert "$dirt" +level 3%,45% "$noise" +level 3%,35% -compose plus -composite +repage "$tmpcomp" &
convert "$dirt3" +level 3%,45% +repage "$tmpcomp2" ; wait
dot
convert "$tmpcomp" "$tmpcomp2" -compose plus -composite +repage "$tmpcomp3"
dot
convert "$tmpcomp3" "$dirt2" -compose plus -composite +repage -colorspace gray -fill "$color" +repage +level ${low}%,${high}% -tint "100" -modulate "$bri,$col,$hue" "$final"
(( debug )) && set +x
dot
}

restart() {
if pgrep -x "$1" > /dev/null
then
    (echo "$1 running, restarting"
    killall -w "$1"
    "${1}" &) &
else
    echo "$1 wasn't running"
fi
}

setwall () {
    nitrogen --set-tiled "$final"
}

# How many monitors connected
monitors=$(xrandr -d :0 -q | grep ' connected' -c)

# is monitors a number
if ! [[ $monitors =~ ^[1-9]+$ ]]; then
    >&2 echo "No monitors detected, assuming one."
    monitors="1"
fi

for (( c=1; c<=monitors; c++ ))
do
	(( debug )) && echo "monitor $c"
        printf " %s " "$c"
    noise
        (( debug )) && echo
    dirt & dirt2 & dirt3 ; wait 
        (( debug )) && echo
    compose 
    nitrogen --head=$(( c - 1 )) --set-tiled "$final" > /dev/null 2>&1 || exit
        (( debug )) && beepspeakers
done

restart wbar > /dev/null 2>&1

# benchmark end
printf " "
END=$(date +%s.%N)
DIFF=$(echo "$END - $START" | bc -l)
printf "noiseAndDirt done in %.0f seconds\n" "$DIFF"
